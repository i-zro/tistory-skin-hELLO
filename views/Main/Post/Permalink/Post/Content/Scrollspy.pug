template(x-if='$data.headings.length > 0')
  #scrollspy(
    x-data='scrollspy'
    @scroll.window='scrollspy'
    x-transition:enter='transition ease-linear duration-200'
    x-transition:enter-start='opacity-0'
    x-transition:enter-end='opacity-100'
    x-transition:leave='transition ease-linear duration-200'
    x-transition:leave-start='opacity-100'
    x-transition:leave-end='opacity-0'
    x-show='show'
    class='absolute top-0 h-full')
    div(class='sticky top-20')
      button(
        x-show='! open'
        @click='toggle'
        class='fixed top-20 right-3 xl:right-4 w-8 h-8 z-30 rounded-md bg-h-750 hover:bg-h-yellow dark:bg-b-375 hover:dark:bg-b-purple text-h-350 hover:text-h-200 dark:text-b-900 dark:hover:text-b-900')
        span(class='text-hidden') 목차
        i(class='fa-solid fa-list-check')
      div(
        :class='open ? "right-4" : "-right-60"'
        class='max-h-[calc(100vh-theme(spacing.20)-theme(spacing.10)-theme(spacing.3)-2rem)] overflow-hidden w-56 text-sm box-border transition-[right] rounded-xl fixed top-20 right-4 z-40 bg-h-750 dark:bg-b-375 block')
        div(class='overflow-x-hidden overflow-y-scroll max-h-[inherit] w-[calc(theme(spacing.56)+theme(spacing.5))]')
          button(
            @click='toggle'
            class='absolute text-base top-2 right-4 text-h-350 dark:text-b-900')
            span(class='text-hidden') 목차 닫기
            i(class='fa-solid fa-xmark')
          ol(
            x-ref='spy'
            class='flex flex-col gap-y-3 p-6')
            template(x-for='heading in $data.headings' :key='heading.id')
              li(
                :class='{ "pl-0": heading.tagName === "H2", "pl-4": heading.tagName === "H3" }'
                class='text-h-400 dark:text-b-900 break-keep')
                a(
                  :href='heading.href'
                  x-text='heading.text'
                  :class='{ "text-h-400 dark:text-b-900": heading.active }'
                  class='text-h-400 hover:text-h-200 dark:text-b-800 hover:dark:text-b-900')

script(once='alpine-scrollspy-component').
  document.addEventListener('alpine:init', () => Alpine.data('scrollspy', () => ({
    /**
     * Show
     *
     * @property {boolean} show
     */
    show: false,

    /**
     * On active Class
     *
     * @property {string} activeClass
     */
    activeClass: 'active',

    /**
     * Open
     *
     * @property {boolean} open
     */
    open: false,

    /**
     * Scollspy
     */
    scrollspy () {
      this.track()
      this.on()
    },

    /**
     * Toggle
     */
    toggle () {
      this.open = ! this.open
    },

    /**
     * Track
     */
    track () {
      const $headings = this.$headings

      $headings.forEach(($heading, index) => {
        if (this.in($heading)) {
          this.reset()
          this.hit(index)
        }
      })

      const $heading = $headings.item(0)

      if (this.out($heading)) {
        this.reset()
      }
    },

    /**
     * On
     */
    on () {
      this.show = this.$article.getBoundingClientRect().top < 0
    },

    /**
     * Active
     *
     * @param {number} index
     */
    hit (index) {
      this.$data.headings[index].active = true
    },

    /**
     * inactive All
     */
    reset () {
      this.$data.headings.forEach(spy => spy.active = false)
    },

    /**
     * Scroll in heading
     *
     * @param {HTMLElement} $heading
     *
     * @returns {boolean}
     */
    in ($heading) {
      return $heading.getBoundingClientRect().top < 0
    },

    /**
     * Scroll out heading
     *
     * @param {HTMLElement} $heading
     *
     * @returns {boolean}
     */
    out ($heading) {
      return $heading.getBoundingClientRect().top > 0
    },

    /**
     * Article
     *
     * @returns {HTMLElement}
     */
    get $article () {
      return this.$refs.article
    },

    /**
     * Get headings in content
     *
     * @return {NodeListOf<HTMLElement>}
     */
    get $headings () {
      return this.$article.querySelectorAll(this.$data.supportHeadings)
    }
  })))
