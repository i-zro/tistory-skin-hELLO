article#content(
  x-ref='content'
  class='relative')
  div(x-data='content')
    s_if_var_toc
      include Content/TOC
    #article(x-ref='article')
      template(
        x-ref='articleTemplate'
        x-teleport='#article')
        div
          | #{`[##_${type}_rep_desc_##]`}
          //- include Content/Subscription
    s_if_var_scrollspy
      include Content/Scrollspy

script(once='alpine-content-component').
  document.addEventListener('alpine:init', () => Alpine.data('content', () => ({
    /**
     * Support Headings
     *
     * @property {array} headings
     */
    supportHeadings: '.contents_style > h2, .contents_style > h3',

    /**
     * Headings
     *
     * @property {array} headings
     */
    headings: [],

    /**
     * Init 'content' Component
     */
    init () {
      this.setAnchorToHeadings()
      this.collectHeading()

      this.setLazyLoadToImages()
      this.setRatioToImages()
      this.setPositionToImages()

      this.initCodeBlocks()
      this.highlightCodeBlocks()
    },

    initCodeBlocks () {
      const codeBlock = this.$article.querySelectorAll('pre');
      for (let i = 0; i < codeBlock.length; i++) {
        codeBlock[i].getElementsByTagName("code")[0].insertAdjacentHTML('beforebegin', `
          <div class="relative w-[100%] h-10 px-6 bg-h-300 flex justify-between items-center">
            <div class="flex gap-x-2">
              <div class="w-3 h-3 rounded-full bg-browser-red"></div>
              <div class="w-3 h-3 rounded-full bg-browser-yellow"></div>
              <div class="w-3 h-3 rounded-full bg-browser-green"></div>
            </div>
            <div style="font-family: 'SUIT'" class="language text-[14px] text-code-white leading-none"></div>
            <button class="absolute w-content h-[24px] px-2 right-6 bottom-[-2.5rem] rounded-[4px] text-[12px] text-code-white tracking-wider flex items-center bg-h-300">COPY</button>
          </div>
        `)
        codeBlock[i].getElementsByClassName("language")[0].innerText = codeBlock[i].classList.value.toUpperCase();
      }
    },

    /**
     * Syntax highlighting code blocks in template
     */
    highlightCodeBlocks () {
      this.$article.querySelectorAll('pre code').forEach(hljs.highlightElement)
    },

    /**
     * Collect heading in template
     */
    collectHeading () {
      this.$headings.forEach($heading => {
        const heading = this.heading($heading)

        this.headings.push(heading)
      })
    },

    /**
     * Get new Scrollspy item
     *
     * @param {HTMLElement} $heading
     *
     * @return {object}
     */
    heading ($heading) {
      return {
        tagName: $heading.tagName,
        id: $heading.id,
        href: `#${$heading.id}`,
        text: $heading.textContent,
        active: false
      }
    },

    /**
     * Set lazy load to images in template
     */
    setLazyLoadToImages () {
      this.$article.querySelectorAll('figure[class^=image] img').forEach(this.setLazyLoadToImage)
    },

    /**
     * Set lazy load to image
     *
     * @param {object} $image
     */
    setLazyLoadToImage ($image) {
      $image.classList.add('lazyload')

      $image.dataset.src = $image.getAttribute('src')
      $image.dataset.srcset = $image.getAttribute('srcset')
      $image.dataset.sizes = 'auto'

      $image.removeAttribute('src')
      $image.removeAttribute('srcset')
    },

    /**
     * set Ratio to images in template
     */
    setRatioToImages () {
      this.$article.querySelectorAll('figure.imageslideblock').forEach(this.setRatioToImageSlideBlock.bind(this))
      this.$article.querySelectorAll('figure.imageblock').forEach(this.setRatioToImageBlock.bind(this))
      this.$article.querySelectorAll('figure.imagegridblock').forEach(this.setRatioToImageGridBlock.bind(this))
    },

    /**
     * Set Ratio to image block
     *
     * @param {HTMLElement} $imageBlock
     */
    setRatioToImageBlock ($imageBlock) {
      const $imageWrap = $imageBlock.querySelector('span, a')
      const $image = $imageWrap.querySelector('img')

      const paddingBottom = this.ratio($imageBlock, $image)

      $imageWrap.style.paddingBottom = `${paddingBottom}%`
    },

    /**
     * Set Ratio to image grid block
     *
     * @param {HTMLElement} $imageBlock
     */
    setRatioToImageGridBlock ($imageBlock) {
      const $imageWraps = $imageBlock.querySelectorAll('span, a')

      $imageWraps.forEach($imageWrap => {
        const $image = $imageWrap.querySelector('img')

        const paddingBottom = this.ratio($imageWrap, $image)

        $imageWrap.style.paddingBottom = `${paddingBottom}%`
      })
    },

    /**
     * Set Ratio to image slide block
     *
     * @param {HTMLElement} $imageBlock
     */
    setRatioToImageSlideBlock ($imageBlock) {
      const $imageWrap = $imageBlock.querySelector('.image-container')
      const $image = $imageWrap.querySelector('img')

      const paddingBottom = this.ratio($image, $image)

      $imageWrap.style.paddingBottom = `${paddingBottom}%`
    },

    /**
     * Get ratio
     *
     * @param {HTMLElement} $originBlock
     * @param {HTMLElement} $image
     *
     * @return {number}
     */
    ratio ($originBlock, $image) {
      let width = $originBlock.dataset.originWidth
      let height = $originBlock.dataset.originHeight

      if ($image.hasAttribute('width') && $image.hasAttribute('height')) {
        width = $image.getAttribute('width')
        height = $image.getAttribute('height')
      }

      width = $originBlock.dataset.widthpercent
        ? width * (100 / $originBlock.dataset.widthpercent)
        : width

      return height / width * 100
    },

    /**
     * Set position to images
     */
    setPositionToImages () {
      this.$article.querySelectorAll('figure.imageblock').forEach(this.setImageBlockPosition.bind(this))
      this.$article.querySelectorAll('figure.imagegridblock').forEach(this.setImageGridBlockPosition.bind(this))
    },

    /**
     * Set image block position
     *
     * @param {HTMLElement} $imageBlock
     */
    setImageBlockPosition ($imageBlock) {
      const width = this.imageBlockWidth($imageBlock)

      if ($imageBlock.classList.contains('alignCenter')) {
        this.setImageBlockToCenter($imageBlock, width)
      }

      if ($imageBlock.classList.contains('widthContent')) {
        return
      }

      this.setImageBlockWidth($imageBlock, width)
    },

    /**
     * Set image grid block position
     *
     * @param {HTMLElement} $imageBlock
     */
    setImageGridBlockPosition ($imageBlock) {
      const width = this.imageGridBlockWidth()

      this.setImageBlockToCenter($imageBlock, width)
      this.setImageBlockWidth($imageBlock, width)
    },

    /**
     * Center image block
     *
     * @param {HTMLElement} $imageBlock
     */
    imageBlockWidth ($imageBlock) {
      const $imageWrap = $imageBlock.querySelector('span, a')
      const $image = $imageWrap.querySelector('img')
      const width = $image.getAttribute('width') || $imageBlock.dataset.originWidth

      return width > 1100 ? 1100 : width
    },

    /**
     * Center image grid block
     */
    imageGridBlockWidth () {
      return 1100
    },

    /**
     * set Image Width
     *
     * @param {HTMLElement} $imageBlock
     * @param {String|Number} width
     */
    setImageBlockWidth ($imageBlock, width) {
      $imageBlock.style.width = `${width}px`
    },

    /**
     * set Image block to center
     *
     * @param {HTMLElement} $imageBlock
     * @param {String|Number} width
     */
    setImageBlockToCenter ($imageBlock, width) {
      $imageBlock.style.marginLeft = `calc(50% - ${width / 2}px)`
    },

    /**
     * Set anchor to headings in template
     */
    setAnchorToHeadings () {
      this.$headings.forEach(this.setAnchorToHeading.bind(this))
    },

    /**
     * Set anchor to heading
     *
     * @param {HTMLElement} $heading
     */
    setAnchorToHeading ($heading) {
      const link = this.link($heading)
      const $anchor = this.$anchor($heading, `#${link}`)

      $heading.setAttribute('id', link)
      $heading.innerHTML = $anchor.outerHTML
    },

    /**
     * Get link for heading
     *
     * @param {HTMLElement} $heading
     *
     * @return {string}
     */
    link ($heading) {
      return this.$id(encodeURIComponent($heading.textContent))
    },

    /**
     * Get new anchor
     *
     * @param {HTMLElement} $heading
     * @param {string} link
     *
     * @return {HTMLElement}
     */
    $anchor ($heading, link) {
      const $anchor = document.createElement('a')

      $anchor.setAttribute('href', link)
      $anchor.textContent = $heading.textContent

      return $anchor
    },

    /**
     * Get article template content
     *
     * @return {HTMLElement}
     */
    get $article () {
      return this.$refs.articleTemplate.content
    },

    /**
     * Get headings in content
     *
     * @return {NodeListOf<HTMLElement>}
     */
    get $headings () {
      return this.$article.querySelectorAll(this.supportHeadings)
    }
  })))

style(once='content')
  :postcss
    #content {
      .contents_style {
        @apply text-left pt-8 border-t border-t-h-600 dark:border-t-b-400 leading-loose text-h-200 dark:text-b-900;

        .another_category {
          @apply p-8 rounded-[12px] border border-h-200 dark:border-b-400;
        }
        
        a {
          @apply text-h-200 dark:text-b-900 decoration-0;
        }

        h2,
        h3,
        h4 {
          @apply py-5 font-bold scroll-mt-[-1px];

          a {
            @apply text-h-200 dark:text-b-900;
          }
        }

        h2 {
          @apply text-xl lg:text-2xl pb-3;
        }

        h3 {
          @apply text-lg lg:text-xl;
        }

        h4 {
          @apply text-base lg:text-lg;
        }

        ol[data-ke-list-type],
        ul[data-ke-list-type] {
          @apply flex flex-col gap-y-1 list-inside mb-5;

          ol[data-ke-list-type],
          ul[data-ke-list-type] {
            @apply my-0 ml-6;
          }
        }

        p,
        ol[data-ke-list-type],
        ul[data-ke-list-type],
        table[data-ke-align],
        blockquote[data-ke-style=style3] {
          @apply text-h-200 dark:text-b-800;

          b,
          strong {
            @apply font-bold dark:text-b-900;
          }

          a {
            @apply inline-block text-b-blue dark:text-b-blue hover:underline;
          }

          code {
            @apply relative -top-[1px] px-2 py-0.5 rounded-md whitespace-normal text-sm font-sans text-h-300 bg-h-700;
          }
        }

        blockquote[data-ke-style=style2] {
          @apply text-h-500 dark:text-b-700;

          b,
          strong {
            @apply font-bold;
          }

          a {
            @apply inline-block text-b-blue hover:underline;
          }

          code {
            @apply relative -top-[1px] px-2 py-0.5 rounded-md whitespace-normal text-sm font-sans text-h-300 bg-h-700;
          }
        }

        figure,
        pre,
        table[data-ke-align],
        [data-ke-type=moreLess] {
          @apply my-3;
        }

        figure {
          @apply my-1;
        }

        hr {
          @apply invert brightness-0;
        }

        table[data-ke-align] {
          tr {
            @apply border-t border-h-600 dark:border-b-400
          }

          td,
          th {
            @apply bg-transparent border-0 border-b border-h-600 dark:border-b-400 p-3 box-border text-sm leading-normal text-h-200 dark:text-b-900;
          }
        }

        figure {
          figcaption {
            @apply text-h-400 dark:text-b-800 text-center text-sm leading-loose;
          }

          img {
            @apply rounded-[12px];
          }

          &.imageblock.alignCenter,
          &.imagegridblock {
            @apply max-w-none max-lg:w-full max-lg:mx-0 !important;
          }

          &.imageblock,
          &.imagegridblock {
            span,
            a {
              @apply block relative max-w-full max-h-full w-auto h-auto;

              &::after {
                @apply content-[''] block h-0 w-full;
              }

              img {
                @apply absolute top-0 left-0 w-full h-full block;
              }
            }
          }

          &.imageslideblock {
            .image-container {
              @apply min-h-0 max-w-full max-h-full w-auto h-auto !important;

              &::after {
                @apply content-[''] block h-0 w-full;
              }

              .selected  {
                @apply absolute top-0 left-0 max-w-full max-h-full w-full h-full flex justify-center items-center;

                img {
                  @apply w-auto h-auto block;
                }
              }
            }
          }

          &[data-ke-type=opengraph] {
            a {
              @apply border-0;

              .og-image {
                @apply border-r-0 rounded-l-[12px] overflow-hidden;
              }
            }

            .og-text {
              @apply bg-h-750 dark:bg-b-375 rounded-r-[12px];

              .og-title,
              .og-desc,
              .og-host {
                @apply text-h-200 dark:text-b-900 font-sans font-bold;
              }

              .og-desc,
              .og-host {
                @apply text-h-400 dark:text-b-800 font-normal;
              }
            }
          }

          &.fileblock {
            @apply rounded-xl border-0 bg-h-750 dark:bg-b-400;

            .filename {
              @apply mt-3;

              .name {
                @apply h-auto;
              }
            }

            .filename,
            .size {
              @apply text-h-200 dark:text-b-900;
            }

            .image,
            a::after {
              @apply invert brightness-0;
            }
          }
        }

        [data-ke-type=moreLess] {
          @apply relative;

          &::before {
            @apply content-[''] absolute top-4 right-0 w-full h-0 w-full -z-[1] border-b border-dashed border-h-600 dark:border-b-400;
          }

          &.open {
            .btn-toggle-moreless::before {
              @apply fa-circle-arrow-down;
            }
          }

          .btn-toggle-moreless {
            @apply bg-h-750 dark:bg-b-400 text-h-200 dark:text-b-900 text-sm font-bold rounded-xl px-3 py-1 inline-block;

            &::before {
              @apply mr-1.5 fa-circle-arrow-right;
            }
          }

          .moreless-content {
            @apply mt-6;
          }
        }

        blockquote[data-ke-style] {
          @apply font-[initial] my-4 text-h-500 dark:text-b-800 font-sans;

          &[data-ke-style=style1] {
            @apply font-medium text-xl pt-7 leading-loose text-h-500 dark:text-b-800;
          }

          &[data-ke-style=style2] {
            @apply border-l-2 border-solid border-h-600 dark:border-b-600 pl-3 pr-1 text-h-400 dark:text-b-800 text-left text-sm leading-loose;
          }

          &[data-ke-style=style3] {
            @apply border-0 text-h-300 dark:text-b-800 bg-h-750 dark:bg-b-375 leading-loose rounded-xl;
          }
        }

        pre {
          @apply rounded-[12px] flex flex-col overflow-hidden;
          
          code {
            @apply px-6 py-4 leading-normal;

            &.hljs {
              @apply bg-h-150 text-code-white text-sm;
            }

            .hljs-comment,
            .hljs-quote {
              @apply text-code-green;
            }

            .hljs-function, 
            .hljs-params {
              @apply text-code-blue;
            }
          }
        }
      }
    }

style(once='content-postbtn')
  :postcss
    #content {
      .container_postbtn {
        @apply p-0 pt-8 mt-8 border-t border-h-600 dark:border-b-400 text-b-900;

        .postbtn_like > .wrap_btn:not([id^=reaction-]) > button,
        .btn_subscription {
          @apply w-9 h-9 inline-block shadow-none outline-0 rounded-md cursor-pointer leading-none text-[0] p-0 bg-h-750 hover:bg-h-yellow dark:bg-b-375 hover:dark:bg-b-purple before:text-h-350 before:dark:text-b-900;
        }

        .postbtn_like > .wrap_btn:not([id^=reaction-]) > button:hover,
        .btn_subscription:hover {
          @apply before:text-h-200 before:dark:text-b-900
        }

        .btn_subscription {
          @apply hidden;
        }

        .postbtn_like {
          @apply border-0 p-0 flex gap-x-2;

          .wrap_btn {
            @apply inline-block border-0;

            button,
            button[data-entry-id],
            .uoc-count {
              &::before {
                @apply font-bold text-sm;
              }
            }

            .ico_like,
            .ico_share,
            .ico_statistics,
            .ico_etc {
              @apply text-hidden bg-none;
            }

            &[id^=reaction-] button {
              @apply w-16 h-9 rounded-md bg-h-750 hover:bg-h-yellow dark:bg-b-375 hover:dark:bg-b-purple;

              .uoc-icon {
                @apply text-h-350 dark:text-b-900;
              }

              .uoc-count {
                @apply font-bold leading-none;

                &::before {
                  @apply text-sm mr-1.5 fa-heart;
                }
              }
            }

            &[id^=reaction-] button:hover {
              .uoc-icon {
                @apply text-h-200 dark:text-b-900;
              }
            }

            &.wrap_btn_share .btn_share::before {
              @apply fa-share-nodes;
            }

            button[data-entry-id] {
              &::before {
                @apply fa-chart-pie;
              }
            }

            &.wrap_btn_etc {
              .btn_etc1::before {
                @apply fa-wrench;
              }

              .btn_etc2::before {
                @apply fa-ellipsis;
              }
            }
          }
        }
      }
    }

style(once='content-tistory-ccl-layer')
  :postcss
    #tistoryCclLayer {
      @apply shadow-none border-0 bg-h-800 dark:bg-b-375 text-h-100 dark:text-b-900 rounded-md;

      span {
        @apply text-h-100 dark:text-b-900;
      }

      .ico_arrbt {
        @apply hidden;
      }
    }

style(once='content-tistory-layer')
  :postcss
    #tistorySnsLayer,
    #tistoryEtcLayer {
      @apply rounded-md shadow-none bg-h-800 dark:bg-b-375;

      .btn_mark {
        @apply text-h-350 dark:text-b-900;

        &:hover {
          @apply bg-h-yellow dark:bg-b-purple text-h-100 dark:text-b-900;
        }
      }

      .ico_arrbt {
        @apply hidden;
      }

      .bundle_post a {
        @apply text-h-350 dark:text-b-900 no-underline;
      }
    }
